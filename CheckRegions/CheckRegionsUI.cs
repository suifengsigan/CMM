//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\PHEactProject\Source\Project\UGUI\CheckRegions.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: PENGHUI
//              Version: NX 9
//              Date: 12-12-2018  (Format: mm-dd-yyyy)
//              Time: 17:14 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public partial class CheckRegionsUI
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    //private Snap.UI.Block.TabControl tabControl;// Block type: Tabs Page
    private Snap.UI.Block.Group tabPage;// Block type: Group
    private Snap.UI.Block.Group group5;// Block type: Group
    private Snap.UI.Block.Enumeration enum02;// Block type: Enumeration
    private Snap.UI.Block.Group group;// Block type: Group
    private Snap.UI.Block.SelectObject bodySelect0;// Block type: Body Collector
    private Snap.UI.Block.SpecifyVector vector0;// Block type: Specify Vector
    private Snap.UI.Block.Group group1;// Block type: Group
    private Snap.UI.Block.Enumeration enum0;// Block type: Enumeration
    private Snap.UI.Block.LabelBlock label01;// Block type: Label
    private Snap.UI.Block.Button button0;// Block type: Button
    private Snap.UI.Block.Group tabPage1;// Block type: Group
    private Snap.UI.Block.Group group2;// Block type: Group
    private Snap.UI.Block.Double double0;// Block type: Double
    private Snap.UI.Block.LabelBlock label0;// Block type: Label
    private Snap.UI.Block.Toggle toggle0;// Block type: Toggle
    private Snap.UI.Block.ColorPicker colorPicker0;// Block type: Color Picker
    private Snap.UI.Block.Toggle toggle01;// Block type: Toggle
    private Snap.UI.Block.ColorPicker colorPicker01;// Block type: Color Picker
    private Snap.UI.Block.Toggle toggle02;// Block type: Toggle
    private Snap.UI.Block.ColorPicker colorPicker02;// Block type: Color Picker
    private Snap.UI.Block.Toggle toggle03;// Block type: Toggle
    private Snap.UI.Block.ColorPicker colorPicker03;// Block type: Color Picker
    private Snap.UI.Block.Toggle toggle04;// Block type: Toggle
    private Snap.UI.Block.ColorPicker colorPicker04;// Block type: Color Picker
    private Snap.UI.Block.Toggle toggle05;// Block type: Toggle
    private Snap.UI.Block.ColorPicker colorPicker05;// Block type: Color Picker
    private Snap.UI.Block.Button button01;// Block type: Button
    private Snap.UI.Block.Group group4;// Block type: Group
    private Snap.UI.Block.LabelBlock label02;// Block type: Label
    private Snap.UI.Block.Integer integer0;// Block type: Integer
    private Snap.UI.Block.LabelBlock label03;// Block type: Label
    private Snap.UI.Block.Integer integer01;// Block type: Integer
    private Snap.UI.Block.Group group3;// Block type: Group
    private Snap.UI.Block.FaceCollector face_select0;// Block type: Face Collector
    private Snap.UI.Block.Enumeration enum01;// Block type: Enumeration
    private Snap.UI.Block.Button button02;// Block type: Button
    public static readonly int                          EntityType_AllowFaces = (1 << 4);
    public static readonly int                         EntityType_AllowDatums = (1 << 5);
    public static readonly int                         EntityType_AllowBodies = (1 << 6);
    public static readonly int                           BodyRules_SingleBody = (1 << 0);
    public static readonly int                        BodyRules_FeatureBodies = (1 << 1);
    public static readonly int                        BodyRules_BodiesinGroup = (1 << 2);
    public static readonly int          SnapPointTypesOnByDefault_UserDefined = (1 << 0);
    public static readonly int             SnapPointTypesOnByDefault_Inferred = (1 << 1);
    public static readonly int       SnapPointTypesOnByDefault_ScreenPosition = (1 << 2);
    public static readonly int             SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int             SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int         SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int         SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int            SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int        SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int        SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int         SnapPointTypesOnByDefault_PointonCurve = (1 <<10);
    public static readonly int       SnapPointTypesOnByDefault_PointonSurface = (1 <<11);
    public static readonly int     SnapPointTypesOnByDefault_PointConstructor = (1 <<12);
    public static readonly int SnapPointTypesOnByDefault_TwocurveIntersection = (1 <<13);
    public static readonly int         SnapPointTypesOnByDefault_TangentPoint = (1 <<14);
    public static readonly int                SnapPointTypesOnByDefault_Poles = (1 <<15);
    public static readonly int     SnapPointTypesOnByDefault_BoundedGridPoint = (1 <<16);
    public static readonly int     SnapPointTypesOnByDefault_FacetVertexPoint = (1 <<17);
    public static readonly int                           FaceRules_SingleFace = (1 << 0);
    public static readonly int                          FaceRules_RegionFaces = (1 << 1);
    public static readonly int                         FaceRules_TangentFaces = (1 << 2);
    public static readonly int                   FaceRules_TangentRegionFaces = (1 << 3);
    public static readonly int                            FaceRules_BodyFaces = (1 << 4);
    public static readonly int                         FaceRules_FeatureFaces = (1 << 5);
    public static readonly int                        FaceRules_AdjacentFaces = (1 << 6);
    public static readonly int                  FaceRules_ConnectedBlendFaces = (1 << 7);
    public static readonly int                        FaceRules_AllBlendFaces = (1 << 8);
    public static readonly int                             FaceRules_RibFaces = (1 << 9);
    public static readonly int                            FaceRules_SlotFaces = (1 <<10);
    public static readonly int                   FaceRules_BossandPocketFaces = (1 <<11);
    public static readonly int                       FaceRules_MergedRibFaces = (1 <<12);
    public static readonly int                  FaceRules_RegionBoundaryFaces = (1 <<13);
    public static readonly int                 FaceRules_FaceandAdjacentFaces = (1 <<14);
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public CheckRegionsUI()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = "CheckRegionsUI.dlx";
            InitEvent(theDlxFileName, initialize_cb, (s) =>
            {
                return theDialog = theUI.CreateDialog(s);
            });
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    //public static void Main()
    //{
    //    CheckRegionsUI theCheckRegions = null;
    //    try
    //    {
    //        theCheckRegions = new CheckRegionsUI();
    //        theCheckRegions.Show();
    //    }
    //    catch (Exception ex)
    //    {
    //        theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
    //    }
    //    finally
    //    {
    //        if(theCheckRegions != null)
    //            theCheckRegions.Dispose();
    //            theCheckRegions = null;
    //    }
    //}
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    public static void UnloadLibrary(string arg)
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            //tabControl = Snap.UI.Block.Group.GetBlock(theDialog,"tabControl");
            tabPage = Snap.UI.Block.Group.GetBlock(theDialog,"tabPage");
            group5 = Snap.UI.Block.Group.GetBlock(theDialog,"group5");
            enum02 = Snap.UI.Block.Enumeration.GetBlock(theDialog,"enum02");
            group = Snap.UI.Block.Group.GetBlock(theDialog,"group");
            bodySelect0 = Snap.UI.Block.SelectObject.GetBlock(theDialog,"bodySelect0");
            vector0 = Snap.UI.Block.SpecifyVector.GetBlock(theDialog,"vector0");
            group1 = Snap.UI.Block.Group.GetBlock(theDialog,"group1");
            enum0 = Snap.UI.Block.Enumeration.GetBlock(theDialog,"enum0");
            label01 = Snap.UI.Block.LabelBlock.GetBlock(theDialog,"label01");
            button0 = Snap.UI.Block.Button.GetBlock(theDialog,"button0");
            tabPage1 = Snap.UI.Block.Group.GetBlock(theDialog,"tabPage1");
            group2 = Snap.UI.Block.Group.GetBlock(theDialog,"group2");
            double0 = Snap.UI.Block.Double.GetBlock(theDialog,"double0");
            label0 = Snap.UI.Block.LabelBlock.GetBlock(theDialog,"label0");
            toggle0 = Snap.UI.Block.Toggle.GetBlock(theDialog,"toggle0");
            colorPicker0 = Snap.UI.Block.ColorPicker.GetBlock(theDialog,"colorPicker0");
            toggle01 = Snap.UI.Block.Toggle.GetBlock(theDialog,"toggle01");
            colorPicker01 = Snap.UI.Block.ColorPicker.GetBlock(theDialog,"colorPicker01");
            toggle02 = Snap.UI.Block.Toggle.GetBlock(theDialog,"toggle02");
            colorPicker02 = Snap.UI.Block.ColorPicker.GetBlock(theDialog,"colorPicker02");
            toggle03 = Snap.UI.Block.Toggle.GetBlock(theDialog,"toggle03");
            colorPicker03 = Snap.UI.Block.ColorPicker.GetBlock(theDialog,"colorPicker03");
            toggle04 = Snap.UI.Block.Toggle.GetBlock(theDialog,"toggle04");
            colorPicker04 = Snap.UI.Block.ColorPicker.GetBlock(theDialog,"colorPicker04");
            toggle05 = Snap.UI.Block.Toggle.GetBlock(theDialog,"toggle05");
            colorPicker05 = Snap.UI.Block.ColorPicker.GetBlock(theDialog,"colorPicker05");
            button01 = Snap.UI.Block.Button.GetBlock(theDialog,"button01");
            group4 = Snap.UI.Block.Group.GetBlock(theDialog,"group4");
            label02 = Snap.UI.Block.LabelBlock.GetBlock(theDialog,"label02");
            integer0 = Snap.UI.Block.Integer.GetBlock(theDialog,"integer0");
            label03 = Snap.UI.Block.LabelBlock.GetBlock(theDialog,"label03");
            integer01 = Snap.UI.Block.Integer.GetBlock(theDialog,"integer01");
            group3 = Snap.UI.Block.Group.GetBlock(theDialog,"group3");
            face_select0 = Snap.UI.Block.FaceCollector.GetBlock(theDialog,"face_select0");
            enum01 = Snap.UI.Block.Enumeration.GetBlock(theDialog,"enum01");
            button02 = Snap.UI.Block.Button.GetBlock(theDialog,"button02");
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            //if(block == enum02)
            //{
            //}
            //else if(block == bodySelect0)
            //{
            //}
            //else if(block == vector0)
            //{
            //}
            //else if(block == enum0)
            //{
            //}
            //else if(block == label01)
            //{
            //}
            //else if(block == button0)
            //{
            //}
            //else if(block == double0)
            //{
            //}
            //else if(block == label0)
            //{
            //}
            //else if(block == toggle0)
            //{
            //}
            //else if(block == colorPicker0)
            //{
            //}
            //else if(block == toggle01)
            //{
            //}
            //else if(block == colorPicker01)
            //{
            //}
            //else if(block == toggle02)
            //{
            //}
            //else if(block == colorPicker02)
            //{
            //}
            //else if(block == toggle03)
            //{
            //}
            //else if(block == colorPicker03)
            //{
            //}
            //else if(block == toggle04)
            //{
            //}
            //else if(block == colorPicker04)
            //{
            //}
            //else if(block == toggle05)
            //{
            //}
            //else if(block == colorPicker05)
            //{
            //}
            //else if(block == button01)
            //{
            //}
            //else if(block == label02)
            //{
            //}
            //else if(block == integer0)
            //{
            //}
            //else if(block == label03)
            //{
            //}
            //else if(block == integer01)
            //{
            //}
            //else if(block == face_select0)
            //{
            //}
            //else if(block == enum01)
            //{
            //}
            //else if(block == button02)
            //{
            //}
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
        }
        catch (Exception ex)
        {
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: filter_cb
    //------------------------------------------------------------------------------
    public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
    {
        return(NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
    }
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }
    
}
